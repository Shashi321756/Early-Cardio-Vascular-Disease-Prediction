# -*- coding: utf-8 -*-
"""Mini project-Heart Disease Prediction . ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12UZ4kOQe73RuQ2FKnqMDNdtn3iUYz-zT

Libraries
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""importing data set to pandas"""

hdata = pd.read_csv('/content/dataset.csv')

hdata.shape

hdata.head()

hdata.tail()

hdata.info()

hdata.isnull().sum()

"""statistical measures

"""

hdata.describe()

#checcking  target data-i.e how many are with and without heart disease
hdata['target'].value_counts()

"""0-->healthy heart,1-->defective heart

split target and the features as the dataframe contain it together by drop() function.
"""

X = hdata.drop(columns='target', axis=1)
Y = hdata['target']

print(X)

print(Y)

"""split the data into the training and the testing data by train-test-split of the sklearn module"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""MODEL TRAINING,LOGISTIC REGRESSION"""

#logistic regression to model variable
model = LogisticRegression()

#train modelwith the trainig data
model.fit(X_train, Y_train)

"""MODEL EVALUATION AND ACCURACY SCORE"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ', test_data_accuracy)

"""PREDICTIVE SYSTEM--USER INPUT"""

input_data = (60,0,0,140,268,0,0,160,0,3.6,0,2,2)

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')